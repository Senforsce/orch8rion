//line samples/client/gorm.go:1:1
// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023-present Datadog, Inc.

package main

import (
//line samples/client/gorm.go:10
	"log"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"

	_ "github.com/mattn/go-sqlite3"
//line <generated>:1
	__orch8rion_v2 "github.com/DataDog/dd-trace-go/contrib/database/sql/v2"
	__orch8rion_gormtrace "github.com/DataDog/dd-trace-go/contrib/gorm.io/gorm.v1/v2"
)

//line samples/client/gorm.go:18
func gormClient() {
	sqlDB, err := __orch8rion_v2.Open("sqlite3", "file::memory:?cache=shared")
	if err != nil {
		log.Fatal(err)
	}
	defer sqlDB.Close()

	db, err :=
//line <generated>:1
		func() (*gorm.DB, error) {
			db, err :=
//line samples/client/gorm.go:25
				gorm.Open(postgres.New(postgres.Config{Conn: sqlDB}), &gorm.Config{})
//line <generated>:1
			if err != nil {
				return nil, err
			}
			if err := db.Use(__orch8rion_gormtrace.NewTracePlugin()); err != nil {
				return nil, err
			}
			return db, nil
		}()
//line samples/client/gorm.go:26
	if err != nil {
		log.Fatal(err)
	}

	var user struct {
		gorm.Model
		Name string
	}
	db.Where("name = ?", "gorm.io").First(&user)
}
