//line samples/server/main.go:1:1
// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2023-present Datadog, Inc.

package main

import (
	"io"
	"log"
	"net/http"
//line <generated>:1
	__orch8rion_tracer "github.com/DataDog/dd-trace-go/v2/ddtrace/tracer"
	__orch8rion_profiler "github.com/DataDog/dd-trace-go/v2/profiler"
	__orch8rion_os "os"
)

//line samples/server/main.go:14
func main() {
//line <generated>:1
	{
		defer __orch8rion_profiler.Stop()
	}
	{
		defer __orch8rion_tracer.Stop()
	}
//line samples/server/main.go:15
	s := &http.Server{
		Addr:    ":8080",
		Handler: http.HandlerFunc(myHandler),
	}

	log.Fatal(s.ListenAndServe())
}

// myHandler comment on function
func myHandler(w http.ResponseWriter, r *http.Request) {
	b, err := io.ReadAll(r.Body)
	// test comment in function
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte(err.Error()))
		return
	}
	defer r.Body.Close()
	w.WriteHeader(http.StatusOK)
	w.Write(b)
}

func instrumentedHandler(w http.ResponseWriter, r *http.Request) {
	b, err := io.ReadAll(r.Body)
	// test comment in function
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte(err.Error()))
		return
	}
	defer r.Body.Close()
	w.WriteHeader(http.StatusOK)
	w.Write(b)
}

// comment that is just hanging out unattached
//
//line <generated>:1
func init() { __orch8rion_tracer.Start() }
func init() {
	switch __orch8rion_os.Getenv("DD_PROFILING_ENABLED") {
	case "1", "true", "auto":
		// The "auto" value can be set if profiling is enabled via the
		// Datadog Admission Controller. We always turn on the profiler in
		// the "auto" case since we only send profiles after at least a
		// minute, and we assume anything running that long is worth
		// profiling.
		err := __orch8rion_profiler.Start(
			__orch8rion_profiler.WithProfileTypes(__orch8rion_profiler.CPUProfile, __orch8rion_profiler.HeapProfile, __orch8rion_profiler.GoroutineProfile, __orch8rion_profiler.MutexProfile),
			__orch8rion_profiler.WithTags("orch8rion:true"),
		)
		if err != nil {
			// TODO: is there a better reporting mechanism?
			// The tracer and profiler already use the stdlib logger, so
			// we're not adding anything new. But users might be using a
			// different logger.
			log.Printf("failed to start profiling: %s", err.Error())
		}
	}
}
