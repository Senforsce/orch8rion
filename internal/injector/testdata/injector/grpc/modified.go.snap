//line input.go:1:1
package test

import (
  "log"
  "net"

  "google.golang.org/grpc"
//line <generated>:1
  __orch8rion_grpctrace "gopkg.in/DataDog/dd-trace-go.v1/contrib/google.golang.org/grpc"
)

//line input.go:10
func grpcClient() {
  dialOpts := []grpc.DialOption{grpc.WithInsecure()}
  conn, err := grpc.Dial("localhost:50051",
//line <generated>:1
    func(opts ...grpc.DialOption) []grpc.DialOption {
      return append(opts, grpc.WithStreamInterceptor(__orch8rion_grpctrace.StreamClientInterceptor()), grpc.WithUnaryInterceptor(__orch8rion_grpctrace.UnaryClientInterceptor()))
    }(
//line input.go:12
      dialOpts...)...)
  if err != nil {
    log.Fatal(err)
  }
  defer conn.Close()
}

func grpcServer() {
  ln, err := net.Listen("tcp", ":50051")
  if err != nil {
    log.Fatal(err)
  }

  s := grpc.NewServer(grpc.EmptyServerOption{},
//line <generated>:1
    grpc.StreamInterceptor(__orch8rion_grpctrace.StreamServerInterceptor()), grpc.UnaryInterceptor(__orch8rion_grpctrace.UnaryServerInterceptor()))
//line input.go:26
  if err := s.Serve(ln); err != nil {
    log.Fatalf("failed to serve: %v", err)
  }
}
